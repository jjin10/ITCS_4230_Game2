<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_down</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
initialize_movement_entity(0.5, 1, obj_wall);
initialize_hurtbox_entity();
grd = sprite_width;
accel_ = 0.5;
max_speed_ = 1.5;
evade_speed_ = 2;
dir_facing_ = dir.right;
dir_evade_ = 0;
anim_speed_ = 0.2;


enum player {
    move,
    attack,
    evade,
    block,
    push_block,
    parry,
    hit,
    knockback,
    pickup,
    throw,
    item_get
}

enum dir {
    right,
    up,
    left,
    down
}
starting_state_ = player.move;
state_ = starting_state_;

//Sprite lookup table
sprite_[player.move, dir.right] = spr_player_right;
sprite_[player.move, dir.up] = spr_player_up;
sprite_[player.move, dir.left] = spr_player_left;
sprite_[player.move, dir.down] = spr_player_down;

sprite_[player.attack, dir.right] = spr_atk_right;
sprite_[player.attack, dir.up] = spr_atk_up;
sprite_[player.attack, dir.left] = spr_atk_left;
sprite_[player.attack, dir.down] = spr_atk_down;

sprite_[player.evade, dir.right] = spr_evade_right;
sprite_[player.evade, dir.up] = spr_evade_up;
sprite_[player.evade, dir.left] = spr_evade_left;
sprite_[player.evade, dir.down] = spr_evade_down;

sprite_[player.block, dir.right] = spr_player_right;
sprite_[player.block, dir.up] = spr_player_up;
sprite_[player.block, dir.left] = spr_player_left;
sprite_[player.block, dir.down] = spr_player_down;

sprite_[player.push_block, dir.right] = spr_player_right;
sprite_[player.push_block, dir.up] = spr_player_up;
sprite_[player.push_block, dir.left] = spr_player_left;
sprite_[player.push_block, dir.down] = spr_player_down;

sprite_[player.parry, dir.right] = spr_player_right;
sprite_[player.parry, dir.up] = spr_player_up;
sprite_[player.parry, dir.left] = spr_player_left;
sprite_[player.parry, dir.down] = spr_player_down;

sprite_[player.hit, dir.right] = spr_player_right;
sprite_[player.hit, dir.up] = spr_player_up;
sprite_[player.hit, dir.left] = spr_player_left;
sprite_[player.hit, dir.down] = spr_player_down;

image_speed = 0;
image_index = 0;

attack = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm for Push Block
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm for Parry
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm for Invincibility
invincible_ = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Machine
depth = -y;
event_user(state_);
sprite_index = sprite_[state_,dir_facing_];

if global.player_health &lt;= 0 and !invincible_ {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goto other room
global.player_start_position = other.start_;
obj_player.persistent = true;
room_goto(other.room_);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_col">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hit Logic
if global.player_health &lt;= 0 exit;
if hurtbox_entity_can_be_hit_by(other){
    switch(state_){
        case player.block:
            global.player_shield -= other.damage_; 
            var _knockback_direction = point_direction(other.x,other.y, x, y);
            set_movement(_knockback_direction, other.knockback_*0.55);
            if global.player_shield &lt;= 0 {
                if chance(0.5){
                    global.player_health += global.player_shield;
                    invincible_ = true;
                    alarm[0] = room_speed * 0.75;
                    global.player_health -= other.damage_;  
                    var _knockback_direction = point_direction(other.x,other.y, x, y);
                    set_movement(_knockback_direction, other.knockback_);
                    state_ = player.hit;
                    event_user(state_);
                    audio_play_sound(a_hurt, 6, false); 
                }
                global.player_shield = 0;
            }
            break;
        case player.push_block:
            var _angle = 0;
            var _frames = 3;
            var _damage = 0;
            var _knockback = 6;
            var _col = create_col(spr_bomb_col, x, y, _angle, _frames, array(obj_enemy), _damage, _knockback);
            audio_play_sound(a_pause, 8, false);
            break;
        case player.parry:
            global.player_shield += other.damage_;
            var _angle = 0;
            var _frames = 3;
            var _damage = 0;
            var _knockback = 8;
            var _col = create_col(spr_parry_col, x, y, _angle, _frames, array(obj_enemy), _damage, _knockback);
            audio_play_sound(a_unpause, 8, false);
            break;
        default:
            invincible_ = true;
            alarm[0] = room_speed * 0.75;
            global.player_health -= other.damage_;  
            var _knockback_direction = point_direction(other.x,other.y, x, y);
            set_movement(_knockback_direction, other.knockback_);
            state_ = player.hit;
            event_user(state_);
            audio_play_sound(a_hurt, 6, false);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit State
image_index = 0;
move_movement_entity(true);
apply_friction_to_movement_entity();

if speed_ == 0 {
    state_ = starting_state_;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parry State
image_speed = 0;

if alarm_get(1) == 0 {
    state_ = player.move;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Push_Block State
image_speed = 0;

if alarm_get(2) == 0 {
    state_ = player.block;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Block State
image_speed = 0;
image_index = 0;

var _block_input = obj_input.action2_pressed;
var _push_block_input = obj_input.action3_pressed;

if _push_block_input == true {
    image_index = 0;
    alarm_set(2, 12);
    state_ = player.push_block;
}

move_movement_entity(true);
apply_friction_to_movement_entity();

if _block_input == false {
    state_ = starting_state_;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Evade State
image_speed = anim_speed_;

set_movement(dir_evade_, evade_speed_); 
move_movement_entity(false);

if animation_hit_frame(image_number - 1) {
    state_ = player.move;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack State
image_speed = 0.2;

if animation_hit_frame(1) {
    var _angle = dir_facing_ * 90
    var _frames = 3;
    var _damage = 1;
    var _knockback = 8;
    var _col = create_col(spr_attack_col, x, y, _angle, _frames, array(obj_enemy, obj_grass), _damage, _knockback);
    audio_play_sound(a_swipe, 8, false);
    switch dir_facing_ {
        case dir.up: _col.y -= 4; break
        default: _col.y -= 8;
    }
    
}

if animation_hit_frame(image_number - 1) {
    state_ = player.move;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement State
image_speed = 0;

//Input
var _x_input = obj_input.right - obj_input.left;
var _y_input = obj_input.down - obj_input.up;
var _attack_input = obj_input.action1_pressed;
var _block_input = obj_input.action2_pressed;
var _parry_input = obj_input.action3_pressed;
var _interact_input = obj_input.action4_pressed;
var _evade_input = obj_input.action5_pressed;
var _input_dir = point_direction(0, 0, _x_input, _y_input);
dir_evade_ = dir_facing_*90;

//Block
if _block_input == true {
    image_index = 0;
    state_ = player.block;
}

//Parry
if _parry_input == true {
    image_index = 0;
    alarm_set(1, 8);
    state_ = player.parry;
}

//Movement
if _x_input == 0 and _y_input == 0 {
    image_index = 0;
    image_speed = 0;
    apply_friction_to_movement_entity();
} else {
    image_speed = anim_speed_;
    get_dir_facing(_input_dir);
    if _evade_input == true {
        image_index = 0;
        state_ = player.evade;
    }
    add_movement_maxspeed(_input_dir, accel_, max_speed_);   
}

if _attack_input == true {
    image_index = 0;
    state_ = player.attack;
}

sprite_index = sprite_[state_,dir_facing_];
move_movement_entity(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit Flash and Shadow
draw_sprite(spr_med_shadow, 0, x, y);
draw_self();
draw_self_flash(c_white, 12, alarm[0]);
if state_ == player.block {
    draw_sprite(spr_shield, 0, x, y);
}

if state_ == player.push_block {
    draw_sprite(spr_shield_pulse, 0, x, y);
}

if state_ == player.parry {
    draw_sprite(spr_parry, image_index, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
